{"version":3,"file":"react-country-flag.cjs.production.min.js","sources":["../src/index.tsx"],"sourcesContent":["import * as React from 'react';\n\nconst DEFAULT_CDN_URL =\n  'https://cdnjs.cloudflare.com/ajax/libs/flag-icon-css/4.1.4/flags/4x3/';\nconst DEFAULT_CDN_SUFFIX = 'svg';\n\n// offset between uppercase ascii and regional indicator symbols\nconst OFFSET = 127397;\n\ninterface EmojiProps extends React.HTMLAttributes<HTMLSpanElement> {\n  cdnSuffix?: string;\n  cdnUrl?: string;\n  countryCode: string;\n  style?: React.CSSProperties;\n  svg?: false;\n}\n\ninterface ImgProps extends React.ImgHTMLAttributes<HTMLImageElement> {\n  cdnSuffix?: string;\n  cdnUrl?: string;\n  countryCode: string;\n  style?: React.CSSProperties;\n  svg?: true;\n}\n\nexport type ReactCountryFlagProps = EmojiProps | ImgProps;\n\nexport const ReactCountryFlag = ({\n  cdnSuffix = DEFAULT_CDN_SUFFIX,\n  cdnUrl = DEFAULT_CDN_URL,\n  countryCode,\n  style,\n  svg = false,\n  ...props\n}: ReactCountryFlagProps) => {\n  if (typeof countryCode !== 'string') {\n    return null;\n  }\n\n  if (svg) {\n    const flagUrl = `${cdnUrl}${countryCode.toLowerCase()}.${cdnSuffix}`;\n\n    return (\n      <img\n        {...props}\n        src={flagUrl}\n        style={{\n          display: 'inline-block',\n          width: '1em',\n          height: '1em',\n          verticalAlign: 'middle',\n          ...style,\n        }}\n      />\n    );\n  }\n\n  const emoji = countryCode\n    .toUpperCase()\n    .replace(/./g, char => String.fromCodePoint(char.charCodeAt(0) + OFFSET));\n\n  return (\n    <span\n      role=\"img\"\n      {...props}\n      style={{\n        display: 'inline-block',\n        fontSize: '1em',\n        lineHeight: '1em',\n        verticalAlign: 'middle',\n        ...style,\n      }}\n    >\n      {emoji}\n    </span>\n  );\n};\n\nexport default ReactCountryFlag;\n"],"names":["ReactCountryFlag","cdnSuffix","cdnUrl","countryCode","style","svg","props","flagUrl","toLowerCase","React","src","display","width","height","verticalAlign","emoji","toUpperCase","replace","char","String","fromCodePoint","charCodeAt","role","fontSize","lineHeight"],"mappings":"mWA2BaA,EAAmB,oBAC9BC,UAAAA,aAxByB,YAyBzBC,OAAAA,aA1BA,0EA2BAC,IAAAA,YACAC,IAAAA,UACAC,IAAAA,gBACGC,6IAEwB,iBAAhBH,SACF,QAGLE,EAAK,KACDE,KAAaL,EAASC,EAAYK,kBAAiBP,SAGvDQ,uCACMH,GACJI,IAAKH,EACLH,SACEO,QAAS,eACTC,MAAO,MACPC,OAAQ,MACRC,cAAe,UACZV,UAMLW,EAAQZ,EACXa,cACAC,QAAQ,MAAM,SAAAC,UAAQC,OAAOC,cAAcF,EAAKG,WAAW,GApDjD,kBAuDXZ,sCACEa,KAAK,OACDhB,GACJF,SACEO,QAAS,eACTY,SAAU,MACVC,WAAY,MACZV,cAAe,UACZV,KAGJW"}